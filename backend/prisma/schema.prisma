// Prisma schema for VetCare+

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////
// Enums
//////////////////////

enum Role {
  OWNER
  VET
  ADMIN
}

enum ApptStatus {
  BOOKED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

//////////////////////
// Models
//////////////////////

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  passwordHash String
  role         Role    @default(OWNER)

  // relations
  pets         Pet[]
  appointments Appointment[] @relation("UserAppointments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id        String    @id @default(cuid())
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name      String
  species   String?
  breed     String?
  dob       DateTime?
  photoUrl  String?
  archived  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  appointments Appointment[]

  @@index([ownerId])
}

model Vet {
  id             String   @id @default(cuid())
  name           String
  specialization String?
  email          String?
  phone          String?
  archived       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  availability Availability[]
  appointments Appointment[]

  @@index([name])
}

model Availability {
  id        String   @id @default(cuid())
  vetId     String
  vet       Vet      @relation(fields: [vetId], references: [id], onDelete: Cascade)
  startAt   DateTime
  endAt     DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vetId])
  @@index([startAt])
}

model Appointment {
  id String @id @default(cuid())

  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  vetId String
  vet   Vet    @relation(fields: [vetId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation("UserAppointments", fields: [ownerId], references: [id], onDelete: Cascade)

  dateTime DateTime
  status   ApptStatus @default(BOOKED)

  payment Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([petId])
  @@index([vetId])
  @@index([ownerId])
  @@index([dateTime])
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String        @unique
  appointment   Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  amountCents   Int
  status        PaymentStatus @default(PENDING)
  reference     String?
  createdAt     DateTime      @default(now())
}
